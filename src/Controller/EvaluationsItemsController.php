<?php
namespace app\Controller;

/**
 * EvaluationsItems Controller
 *
 * @property EvaluationsItem $EvaluationsItem
 */
class EvaluationsItemsController extends AppController {

	public $components = array('JsonTree');

	public function usedItems($id = null){

		$classroom = $this->EvaluationsItems->Evaluations->Classrooms->get($id, [
            'contain' => ['User', 'Users', 'Establishments', 'Years']
        ]);
		$this->set('classroom', $classroom);

		$items_competences = $this->EvaluationsItems->find('list',[
            'contain' => ['Evaluations','Items'],
            'valueField' => 'Items.competence_id',
            'keyField' => 'Items.id',
			'fields' => [
				'Items.id',
                'Items.title',
                'Items.competence_id',
			],
			'conditions'=>[
				'Evaluations.classroom_id' => $id,
				'Evaluations.unrated' => 0
			]
		])->hydrate(false)->toArray();
		$json = $this->JsonTree->allUsedItemsToJson($items_competences, array_keys($items_competences));
        $this->set(compact('json'));
	}

	public function attachitem(){

        $evaluation = $this->EvaluationsItems->Evaluations->get($this->request->query['evaluation_id']);
        $item = $this->EvaluationsItems->Items->get($this->request->query['item_id']);

	    if($this->EvaluationsItems->isItemAlreadyAttachedToEvaluation($evaluation->id,$item->id)){
		    $this->Flash->error('Impossible d\'ajouter cet item à cette évaluation, il y est déjà associé.');
			$this->redirect(array(
			    'controller'    => 'competences',
			    'action'        => 'attachitem', 
			    'evaluation_id' => $evaluation->id));
	    }else{
	    	$lastItemPosition = $this->EvaluationsItems->find('all', array(
		        'conditions' => array('EvaluationsItems.evaluation_id' => $evaluation->id)
		    ))->count();
			$nextItemPosition = $lastItemPosition+1;
			
		    $data = array(
				'evaluation_id' => $evaluation->id,
				'item_id' => $item->id,
				'position' => $nextItemPosition
			);
			
			$evaluationItems = $this->EvaluationsItems->newEntity($data);
			$this->EvaluationsItems->save($evaluationItems);
			
			$this->Flash->success('L\'item sélectionné a été correctement associé à l\'évaluation.');
			$this->redirect(array('controller' => 'evaluations', 'action' => 'attacheditems', $evaluation->id));
	    }			
	}

	public function attachunrateditem(){
		//On vérifie que les paramètres nommés item_id et period_id ont été fournis et qu'ils existent.
        $period_id = $this->CheckParams->checkForNamedParam('Period','period_id', $this->request->query['period_id']);
        $item_id = $this->CheckParams->checkForNamedParam('Item','item_id', $this->request->query['item_id']);
        $classroom_id = $this->CheckParams->checkForNamedParam('Classroom','classroom_id', $this->request->query['classroom_id']);

        $evaluation = $this->EvaluationsItem->Evaluation->searchIfAutogeneratedTestExists($classroom_id, $period_id);

		//Si l'évaluation factice n'existe pas, on la crée
	    if(!$evaluation)
			$evaluation_id = $this->EvaluationsItem->Evaluation->autoGenerateTestForUnratedItems($classroom_id, $period_id);
	    else
		    $evaluation_id = $evaluation['Evaluation']['id'];

		$data = array(
			'EvaluationsItem' => array(
				'evaluation_id' => $evaluation_id,
				'item_id' => $item_id,
				'position' => 1
			)
		);
		
		$this->EvaluationsItem->create();
		$this->EvaluationsItem->save($data);
		
		$pupils = $this->EvaluationsItem->Evaluation->Classroom->ClassroomsPupil->findAllByClassroomId($classroom_id,array('pupil_id'),null,null,null,0);
		
		unset($data);
		
		foreach($pupils as $id => $pupil){
			$data[$id]['evaluation_id'] = $evaluation_id;
			$data[$id]['pupil_id'] = $pupil['ClassroomsPupil']['pupil_id'];
			$data[$id]['item_id'] = $item_id;
			$data[$id]['result'] = 'X';
		}
		
		$this->EvaluationsItem->Evaluation->Result->saveMany($data, array('validate' => false));
		
		$this->Flash->success('L\'item a été correctement associé à cette période');
		$this->redirect(array('controller' => 'classrooms', 'action' => 'viewunrateditems', $classroom_id));
	}
	
	public function additem(){	
		$this->set('title_for_layout', __('Ajouter un item'));

		$item = $this->EvaluationsItems->Items->newEntity();
		$evaluation = $this->EvaluationsItems->Evaluations->get($this->request->query['evaluation_id']);
        $competence = $this->EvaluationsItems->Items->Competences->get($this->request->query['competence_id']);
		$levels = $this->EvaluationsItems->Items->Levels->find('list');
		$this->set(compact('levels', 'evaluation', 'competence', 'item'));

		$this->set('path', $this->tabPathToString($this->EvaluationsItems->Items->Competences->find('path', ['for' => $competence->id])));

		$this->set('json', $this->JsonTree->allLpcnodesToJson());
		
		if ($this->request->is('post')) {
			if(empty($this->request->data['levels']['_ids']))
				$item->errors('levels', 'Vous devez sélectionner au moins un niveau.');
			$lastItemPosition = $this->EvaluationsItems->find('all', array(
		        'conditions' => array('EvaluationsItems.evaluation_id' => $evaluation->id)
		    ))->count();
			$nextItemPosition = $lastItemPosition+1;
			
			$newItem = $this->EvaluationsItems->Items->newEntity($this->request->data);
			if ($this->EvaluationsItems->Items->save($newItem)) {
				$data = array(
					'evaluation_id' => $evaluation->id,
					'item_id' => $newItem->id,
					'position' => $nextItemPosition
				);
				
				$evaluationItem = $this->EvaluationsItems->newEntity($data);
				$this->EvaluationsItems->save($evaluationItem);
				
				$this->Flash->success('L\'item a été correctement créé et associé à l\'évaluation.');
				$this->redirect(array('controller' => 'evaluations', 'action' => 'attacheditems', $evaluation->id));
			} else {
				$this->Flash->error('Des erreurs ont été détectées durant la validation du formulaire. Veuillez corriger les erreurs mentionnées.');
			}
		}
	}
	
	private function tabPathToString($path){
	    $mypath = '';
	    foreach($path as $competence){
	    	$mypath .= $competence->title.' <i class="fa fa-chevron-right"></i> ';
	    }
	    $mypath = substr($mypath, 0, -36);
	    
	    return $mypath;
	}
	
	public function addunrateditem(){
	
		$this->set('title_for_layout', __('Ajouter un item non évalué'));

        //On vérifie que les paramètres nommés period_id et competence_id ont été fournis et qu'ils existent.
        $period_id = $this->CheckParams->checkForNamedParam('Period','period_id', $this->request->query['period_id']);
        $competence_id = $this->CheckParams->checkForNamedParam('Competence','competence_id', $this->request->query['competence_id']);
		
		$levels = $this->EvaluationsItem->Item->Level->find('list', array('recursive' => 0));
		$this->set('levels', $levels);
		
		$this->set('path', $this->tabPathToString($this->EvaluationsItem->Item->Competence->getPath($competence_id)));
		
		if ($this->request->is('post')) {	

            $evaluation = $this->EvaluationsItem->Evaluation->searchIfAutogeneratedTestExists(
                $this->data['Item']['classroom_id'],
                $period_id
            );

			//Si l'évaluation factice n'existe pas, on la crée		    
		    if(!$evaluation)
		    {
                $evaluation_id = $this->EvaluationsItem->Evaluation->autoGenerateTestForUnratedItems(
                    $this->data['Item']['classroom_id'],
                    $period_id
                );
			//Si elle existe, on récupère simplement son id :)
		    }else{
			    $evaluation_id = $evaluation['Evaluation']['id'];
		    }
		
			$this->EvaluationsItem->Item->create();
			if ($this->EvaluationsItem->Item->save($this->request->data)) {
				
				$item_id = $this->EvaluationsItem->Item->id;
				
				$data = array(
					'EvaluationsItem' => array(
						'evaluation_id' => $evaluation_id,
						'item_id' => $this->EvaluationsItem->Item->id,
						'position' => 1
					)
				);
				
				$this->EvaluationsItem->create();
				$this->EvaluationsItem->save($data);
				
				$pupils = $this->EvaluationsItem->Evaluation->Classroom->ClassroomsPupil->findAllByClassroomId($this->data['Item']['classroom_id'],array('pupil_id'),null,null,null,0);
				
				unset($data);
				
				foreach($pupils as $id => $pupil){
					$data[$id]['evaluation_id'] = $evaluation_id;
					$data[$id]['pupil_id'] = $pupil['ClassroomsPupil']['pupil_id'];
					$data[$id]['item_id'] = $item_id;
					$data[$id]['result'] = 'X';			
				}
				
				$this->EvaluationsItem->Evaluation->Result->saveMany($data, array('validate' => false));
				
				$this->Flash->success('L\'item a été correctement créé et associé à cette période');
				$this->redirect(array('controller' => 'classrooms', 'action' => 'viewunrateditems', $this->data['Item']['classroom_id']));
			} else {
				$this->Flash->error('Des erreurs ont été détectées durant la validation du formulaire. Veuillez corriger les erreurs mentionnées.');
			}
		}
		
	}
	
	public function moveup($id = null){
        $itemToEdit = $this->EvaluationsItems->get($id);

        if($itemToEdit->position == 1){
            $this->Flash->error('Impossible de déplacer cet item vers le haut, il est déjà à la première position !');
            $this->redirect(array('controller' => 'evaluations', 'action' => 'attacheditems', $itemToEdit->evaluation_id));
        }else{
            $secondItemToEdit = $this->EvaluationsItems->findByEvaluationIdAndPosition($itemToEdit->evaluation_id, $itemToEdit->position-1)->first();

            $this->updatePositionItem($itemToEdit->id, $itemToEdit->position-1);
            $this->updatePositionItem($secondItemToEdit->id, $secondItemToEdit->position+1);

            $this->redirect(array('controller' => 'evaluations', 'action' => 'attacheditems', $itemToEdit->evaluation_id));
        }

	}
	
	public function movedown($id = null){
        $itemToEdit = $this->EvaluationsItems->get($id);

        $lastItemPosition = $this->EvaluationsItems->find('all', array(
            'conditions' => array('EvaluationsItems.evaluation_id' => $itemToEdit->evaluation_id)
        ))->count();

        if($itemToEdit->position == $lastItemPosition){
            $this->Flash->error('Impossible de déplacer cet item vers le bas, il est déjà à la dernière position !');
            $this->redirect(array('controller' => 'evaluations', 'action' => 'attacheditems', $itemToEdit->evaluation_id));
        }else{
            $secondItemToEdit = $this->EvaluationsItems->findByEvaluationIdAndPosition($itemToEdit->evaluation_id, $itemToEdit->position+1)->first();

            $this->updatePositionItem($itemToEdit->id, $itemToEdit->position+1);
            $this->updatePositionItem($secondItemToEdit->id, $secondItemToEdit->position-1);

            $this->redirect(array('controller'  => 'evaluations', 'action' => 'attacheditems', $itemToEdit->evaluation_id));
        }
	}
	
	private function updatePositionItem($itemId, $newPosition){
        $itemToEdit = $this->EvaluationsItems->get($itemId);
        $itemToEdit->position = $newPosition;
    	$this->EvaluationsItems->save($itemToEdit);
	}
	
	public function unlinkitem($id = null){
		
		$evaluationItem = $this->EvaluationsItems->get($id);
		$this->request->allowMethod(['post', 'delete']);
		$evaluationId = $evaluationItem->evaluation_id;
		$position = $evaluationItem->position;

		if($this->EvaluationsItems->delete($evaluationItem)){
	    	$this->EvaluationsItems->renumberItemsEvaluation($evaluationId, $position);
	    	
	    	$this->Flash->success('L\'item a été correctement dissocié de cette évaluation.');
			$this->redirect(array('controller' => 'evaluations', 'action' => 'attacheditems', $evaluationId));
	    }else{
		    $this->Flash->error('Cette association n\'existe pas');
			$this->redirect(array('controller' => 'evaluations', 'action' => 'attacheditems', $evaluationId));
	    }
	}
}
